#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>
#include <Servo.h>
#include <QueueArray.h>

// تنظیمات نمایشگر
#define TFT_CS   10
#define TFT_DC   9
#define TFT_RST  8
Adafruit_ST7735 tft(TFT_CS, TFT_DC, TFT_RST);

// تنظیمات سنسور
const int TRIG_PIN = 6;
const int ECHO_PIN = 5;

// تنظیمات سروو
Servo radarServo;
const int SERVO_PIN = 3;

// پارامترهای رادار
const int SCAN_START_ANGLE = 0;
const int SCAN_END_ANGLE = 180;
const int MAX_DISTANCE = 500; // 5 متر
const int SCAN_SPEED = 2; // درجه بر میلی‌ثانیه
const int PULSE_WIDTH = 20; // عرض پالس رادار (درجه)
const int HISTORY_FRAMES = 5; // تعداد فریم‌های تاریخی برای ردیابی

// پارامترهای تشخیص
const int MIN_OBJECT_SIZE = 15;
const int MERGE_DISTANCE = 25;
const int TRACKING_THRESHOLD = 40;
const int SIGNAL_THRESHOLD = 30; // آستانه سیگنال برای تشخیص معتبر

// ساختارهای داده
struct RadarPoint {
  int angle;
  int distance;
  int intensity;
  unsigned long timestamp;
};

struct TrackedObject {
  int id;
  float x, y;
  float prevX, prevY;
  float velocityX, velocityY;
  int size;
  int confidence;
  unsigned long lastSeen;
  QueueArray<Point> history;
};

// متغیرهای سیستم
QueueArray<RadarPoint> currentScan;
TrackedObject objects[8];
int nextObjectId = 1;
unsigned long lastScanTime = 0;
bool isScanningForward = true;

// پالت رنگ برای نمایش شدت سیگنال
const uint16_t INTENSITY_COLORS[6] = {
  ST7735_BLUE, ST7735_CYAN, ST7735_GREEN, 
  ST7735_YELLOW, ST7735_MAGENTA, ST7735_RED
};

void setup() {
  Serial.begin(250000);
  
  // تنظیمات نمایشگر
  tft.initR(INITR_BLACKTAB);
  tft.setRotation(3);
  tft.fillScreen(ST7735_BLACK);
  tft.setTextWrap(false);
  
  // تنظیمات سروو
  radarServo.attach(SERVO_PIN);
  radarServo.write(90);
  
  // تنظیمات سنسور
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  
  drawRadarDisplay();
}

void loop() {
  static int currentAngle = 90;
  
  // حرکت اسکنر
  if(isScanningForward) {
    currentAngle += SCAN_SPEED;
    if(currentAngle >= SCAN_END_ANGLE) {
      isScanningForward = false;
      completeScan();
    }
  } else {
    currentAngle -= SCAN_SPEED;
    if(currentAngle <= SCAN_START_ANGLE) {
      isScanningForward = true;
      completeScan();
    }
  }
  
  radarServo.write(currentAngle);
  
  // جمع‌آوری داده‌های رادار
  RadarPoint point = scanAtAngle(currentAngle);
  if(point.distance < MAX_DISTANCE && point.intensity > SIGNAL_THRESHOLD) {
    currentScan.push(point);
  }
  
  // نمایش واقع‌زمان
  updateDisplay();
  delayMicroseconds(500);
}

RadarPoint scanAtAngle(int angle) {
  RadarPoint point;
  point.angle = angle;
  
  // اندازه‌گیری با فیلتر پیشرفته
  const int samples = 7;
  long durations[samples];
  
  for(int i=0; i<samples; i++) {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    
    durations[i] = pulseIn(ECHO_PIN, HIGH, 30000);
    delayMicroseconds(200);
  }
  
  // پردازش سیگنال
  long sum = 0;
  int validSamples = 0;
  int maxDuration = 0;
  
  for(int i=0; i<samples; i++) {
    if(durations[i] > 0) {
      sum += durations[i];
      if(durations[i] > maxDuration) maxDuration = durations[i];
      validSamples++;
    }
  }
  
  if(validSamples > 3) {
    point.distance = (sum / validSamples) * 0.034 / 2;
    // محاسبه شدت سیگنال بر اساس سازگاری نمونه‌ها
    point.intensity = map(maxDuration, 0, 30000, 0, 100);
    point.timestamp = millis();
  } else {
    point.distance = MAX_DISTANCE;
    point.intensity = 0;
  }
  
  return point;
}

void completeScan() {
  // پردازش داده‌های اسکن کامل
  processScanData();
  predictMovements();
  updateTracks();
  lastScanTime = millis();
  currentScan.clear();
}

void processScanData() {
  // گروه‌بندی نقاط به اجسام
  while(!currentScan.isEmpty()) {
    RadarPoint point = currentScan.pop();
    Point cartesian = polarToCartesian(point.angle, point.distance);
    
    // جستجوی جسم موجود برای این نقطه
    bool matched = false;
    for(int i=0; i<8; i++) {
      if(objects[i].confidence > 0) {
        float dist = sqrt(pow(cartesian.x - objects[i].x, 2) + 
                       pow(cartesian.y - objects[i].y, 2));
        
        if(dist < objects[i].size + MERGE_DISTANCE) {
          // به‌روزرسانی موقعیت جسم
          updateObjectPosition(&objects[i], cartesian, point.intensity);
          matched = true;
          break;
        }
      }
    }
    
    // اگر نقطه به جسم موجود تعلق نداشت، جسم جدید ایجاد کن
    if(!matched) {
      int freeIndex = -1;
      for(int i=0; i<8; i++) {
        if(objects[i].confidence == 0) {
          freeIndex = i;
          break;
        }
      }
      
      if(freeIndex >= 0) {
        initNewObject(&objects[freeIndex], cartesian, point.intensity);
      }
    }
  }
}

void updateObjectPosition(TrackedObject *obj, Point newPos, int intensity) {
  // ذخیره تاریخچه موقعیت
  if(obj->history.count() >= HISTORY_FRAMES) {
    obj->history.dequeue();
  }
  obj->history.enqueue({obj->x, obj->y, millis()});
  
  // به‌روزرسانی موقعیت با فیلتر کالمن ساده
  obj->prevX = obj->x;
  obj->prevY = obj->y;
  
  obj->x = (obj->x * 0.7) + (newPos.x * 0.3);
  obj->y = (obj->y * 0.7) + (newPos.y * 0.3);
  
  // محاسبه سرعت
  unsigned long timeDiff = millis() - obj->lastSeen;
  if(timeDiff > 0) {
    obj->velocityX = (obj->x - obj->prevX) / timeDiff;
    obj->velocityY = (obj->y - obj->prevY) / timeDiff;
  }
  
  obj->size = max(obj->size, MIN_OBJECT_SIZE + intensity/10);
  obj->confidence = min(100, obj->confidence + 15);
  obj->lastSeen = millis();
}

void initNewObject(TrackedObject *obj, Point position, int intensity) {
  obj->id = nextObjectId++;
  obj->x = position.x;
  obj->y = position.y;
  obj->prevX = position.x;
  obj->prevY = position.y;
  obj->velocityX = 0;
  obj->velocityY = 0;
  obj->size = MIN_OBJECT_SIZE + intensity/10;
  obj->confidence = 30;
  obj->lastSeen = millis();
  
  while(!obj->history.isEmpty()) {
    obj->history.dequeue();
  }
}

void predictMovements() {
  // پیش‌بینی موقعیت اجسام بر اساس سرعت آنها
  for(int i=0; i<8; i++) {
    if(objects[i].confidence > 0) {
      unsigned long timeSinceUpdate = millis() - objects[i].lastSeen;
      objects[i].x += objects[i].velocityX * timeSinceUpdate;
      objects[i].y += objects[i].velocityY * timeSinceUpdate;
    }
  }
}

void updateTracks() {
  // کاهش اطمینان برای اجسام مشاهده نشده
  for(int i=0; i<8; i++) {
    if(objects[i].confidence > 0) {
      if(millis() - objects[i].lastSeen > 1000) {
        objects[i].confidence -= 10;
        if(objects[i].confidence <= 0) {
          // ریست شیء
          objects[i].confidence = 0;
          while(!objects[i].history.isEmpty()) {
            objects[i].history.dequeue();
          }
        }
      }
    }
  }
}

void drawRadarDisplay() {
  // پس‌زمینه رادار
  tft.fillScreen(ST7735_BLACK);
  
  // دایره‌های فاصله
  for(int r=20; r<=80; r+=20) {
    tft.drawCircle(80, 64, r, ST7735_DARKGREEN);
  }
  
  // خطوط راهنمای زاویه
  for(int a=0; a<360; a+=30) {
    float rad = radians(a);
    int x = 80 + 85 * cos(rad);
    int y = 64 - 85 * sin(rad);
    tft.drawLine(80, 64, x, y, ST7735_DARKGREEN);
  }
  
  // اطلاعات نمایشی
  tft.setTextColor(ST7735_WHITE);
  tft.setCursor(5, 5);
  tft.print("RADAR SYSTEM");
  tft.setCursor(5, 15);
  tft.print("Range: 0-");
  tft.print(MAX_DISTANCE/100.0);
  tft.print("m");
}

void updateDisplay() {
  // پاک‌سازی ناحیه نمایش اشیاء
  tft.fillRect(0, 30, 160, 98, ST7735_BLACK);
  
  // نمایش اطلاعات سیستم
  tft.fillRect(0, 0, 160, 25, ST7735_BLACK);
  tft.setTextColor(ST7735_GREEN);
  tft.setCursor(5, 5);
  tft.print("Obj:");
  
  int activeObjects = 0;
  for(int i=0; i<8; i++) {
    if(objects[i].confidence > 30) activeObjects++;
  }
  tft.print(activeObjects);
  
  tft.setCursor(80, 5);
  tft.print("Scan:");
  tft.print(isScanningForward ? "->" : "<-");
  
  // نمایش اشیاء ردیابی شده
  for(int i=0; i<8; i++) {
    if(objects[i].confidence > 30) {
      // محاسبه رنگ بر اساس شدت و سرعت
      int colorIndex = constrain(map(objects[i].confidence, 30, 100, 0, 5), 0, 5);
      uint16_t objColor = INTENSITY_COLORS[colorIndex];
      
      // نمایش جسم
      int displaySize = max(3, objects[i].size/15);
      tft.fillCircle(objects[i].x, objects[i].y, displaySize, objColor);
      
      // نمایش مسیر حرکت
      if(!objects[i].history.isEmpty()) {
        Point prev = objects[i].history.last();
        tft.drawLine(prev.x, prev.y, objects[i].x, objects[i].y, objColor);
      }
      
      // نمایش برچسب سرعت (برای اشیاء سریع)
      if(sqrt(pow(objects[i].velocityX, 2) + pow(objects[i].velocityY, 2)) > 0.5) {
        tft.setCursor(objects[i].x + 10, objects[i].y - 5);
        tft.print(objects[i].id);
      }
    }
  }
  
  // نمایش اسکنر
  float scanAngle = isScanningForward ? 
    map(millis() - lastScanTime, 0, (SCAN_END_ANGLE-SCAN_START_ANGLE)/SCAN_SPEED, SCAN_START_ANGLE, SCAN_END_ANGLE) :
    map(millis() - lastScanTime, 0, (SCAN_END_ANGLE-SCAN_START_ANGLE)/SCAN_SPEED, SCAN_END_ANGLE, SCAN_START_ANGLE);
  
  float rad = radians(scanAngle);
  int x = 80 + 85 * cos(rad);
  int y = 64 - 85 * sin(rad);
  tft.drawLine(80, 64, x, y, ST7735_GREEN);
  
  // نمایش پالس رادار
  static unsigned long lastPulse = 0;
  if(millis() - lastPulse > 100) {
    lastPulse = millis();
    int pulseLength = map(millis() % 1000, 0, 1000, 5, 30);
    for(int r=0; r<pulseLength; r++) {
      tft.drawCircle(80, 64, r, ST7735_GREEN);
    }
  }
}

Point polarToCartesian(int angle, int distance) {
  Point p;
  float rad = radians(angle);
  int scaledDist = map(distance, 0, MAX_DISTANCE, 0, 80);
  p.x = 80 + scaledDist * cos(rad);
  p.y = 64 - scaledDist * sin(rad);
  return p;
}
