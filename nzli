import FreeCAD as App
import Part
import math

class HighPerformanceNozzle:
    def __init__(self):
        self.doc = App.ActiveDocument or App.newDocument()
        self.params = {
            # ابعاد داخلی
            'inlet_dia': 20.0,       # قطر ورودی (mm)
            'throat_dia': 3.5,       # قطر گلوگاه (mm)
            'exit_dia': 6.0,         # قطر خروجی (mm)
            
            # طول بخش‌ها
            'conv_length': 10.0,     # طول همگرا (mm)
            'throat_length': 2.0,    # طول گلوگاه (mm)
            'div_length': 15.0,      # طول واگرا (mm)
            
            # زوایا
            'conv_angle': 30.0,      # زاویه همگرا (درجه)
            'div_angle': 15.0,       # زاویه واگرا (درجه)
            
            # مشخصات ساخت
            'wall_thickness': 1.0,   # ضخامت دیواره (mm)
            'smoothness': 50         # کیفیت سطح (تعداد segments)
        }
        
        # ایجاد هندسه
        self.create_geometry()
        self.export()
    
    def calculate_geometry(self):
        """محاسبات دقیق هندسی"""
        # شعاع‌های داخلی
        self.r_in = self.params['inlet_dia'] / 2
        self.r_th = self.params['throat_dia'] / 2
        self.r_ex = self.params['exit_dia'] / 2
        
        # شعاع‌های خارجی
        self.r_out_in = self.r_in + self.params['wall_thickness']
        self.r_out_th = self.r_th + self.params['wall_thickness']
        self.r_out_ex = self.r_ex + self.params['wall_thickness']
        
        # کنترل حداقل ضخامت
        if self.r_out_th < 0.5:
            raise ValueError("ضخامت دیواره در گلوگاه بسیار کم است!")
    
    def create_profile(self, internal=True):
        """ایجاد پروفیل با دقت بالا"""
        if internal:
            r1, r2, r3 = self.r_in, self.r_th, self.r_ex
        else:
            r1, r2, r3 = self.r_out_in, self.r_out_th, self.r_out_ex
        
        # نقاط کلیدی
        points = [
            (0, r1),
            (-self.params['conv_length'], r2),
            (-self.params['conv_length'] - self.params['throat_length'], r2),
            (-self.params['conv_length'] - self.params['throat_length'] - self.params['div_length'], r3),
            (-self.params['conv_length'] - self.params['throat_length'] - self.params['div_length'], 0),
            (0, 0)
        ]
        
        # تبدیل به ویectors
        return [App.Vector(x, y, 0) for x, y in points]
    
    def create_geometry(self):
        """ساخت نازل با کیفیت بالا"""
        self.calculate_geometry()
        
        # ایجاد سیم‌ها
        internal_wire = Part.makePolygon(self.create_profile(internal=True))
        external_wire = Part.makePolygon(self.create_profile(internal=False))
        
        # چرخش با کیفیت بالا
        self.internal_shell = internal_wire.revolve(
            App.Vector(0,0,0), 
            App.Vector(1,0,0), 
            360, 
            self.params['smoothness']
        )
        
        self.external_shell = external_wire.revolve(
            App.Vector(0,0,0), 
            App.Vector(1,0,0), 
            360,
            self.params['smoothness']
        )
        
        # ایجاد نازل توخالی
        self.nozzle_solid = self.external_shell.cut(self.internal_shell)
        
        # بهینه‌سازی سطح
        self.nozzle_solid = self.nozzle_solid.removeSplitter()
        
        # اضافه به سند
        self.obj = self.doc.addObject("Part::Feature", "HighPerf_Nozzle")
        self.obj.Shape = self.nozzle_solid
        self.doc.recompute()
    
    def export(self, format='STEP'):
        """خروجی خودکار با کیفیت بالا"""
        import os
        export_path = os.path.join(
            os.path.expanduser("~"),
            "Desktop",
            f"nozzle_optimized.{format.lower()}"
        )
        
        if format.upper() == 'STEP':
            self.obj.Shape.exportStep(export_path)
        elif format.upper() == 'STL':
            # تنظیمات STL با کیفیت بالا
            mesh = self.obj.Shape.tessellate(0.01)  # دقت 0.01mm
            Part.show(mesh)
            App.ActiveDocument.ActiveObject.Mesh.write(export_path)
        else:
            raise ValueError("فرمت پشتیبانی نشده")
        
        print(f"نازل با موفقیت در {export_path} ذخیره شد")

# اجرای نهایی
nozzle = HighPerformanceNozzle()
